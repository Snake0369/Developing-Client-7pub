// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Trading.DataAccess;

#nullable disable

namespace Trading.Access.Migrations
{
    [DbContext(typeof(TradingContext))]
    [Migration("20221107135812_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("trading_cl10_bot")
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Trading.Domain.Contracts.Equity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("DrowDown")
                        .HasColumnType("numeric");

                    b.Property<string>("Instrument")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StrategyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("StrategyId");

                    b.ToTable("Equities", "trading_cl10_bot");
                });

            modelBuilder.Entity("Trading.Domain.Contracts.FuturePosition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("AvailableBalance")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("BankruptcyPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("EntryPrice")
                        .HasColumnType("numeric");

                    b.Property<int?>("Exchange")
                        .HasColumnType("integer");

                    b.Property<Guid>("ExchangeId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Leverage")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("LiquidationPrice")
                        .HasColumnType("numeric");

                    b.Property<int?>("MarginType")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MarkPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("PositionId")
                        .HasColumnType("text");

                    b.Property<int?>("PositionStatus")
                        .HasColumnType("integer");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("RealizedPnL")
                        .HasColumnType("numeric");

                    b.Property<int>("Side")
                        .HasColumnType("integer");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("TakeProfitPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("TotalRealizedPnL")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("UnrealizedPnL")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("WalletBalance")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("FuturePositions", "trading_cl10_bot");
                });

            modelBuilder.Entity("Trading.Domain.Contracts.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("AmountFilled")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("AmountRemaining")
                        .HasColumnType("numeric");

                    b.Property<string>("BaseAsset")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientOrderId")
                        .HasColumnType("text");

                    b.Property<int?>("Exchange")
                        .HasColumnType("integer");

                    b.Property<bool>("IsMargin")
                        .HasColumnType("boolean");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("QuoteAsset")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Side")
                        .HasColumnType("integer");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubpositionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Timestamp")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SubpositionId");

                    b.ToTable("Orders", "trading_cl10_bot");
                });

            modelBuilder.Entity("Trading.Domain.Contracts.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("BaseAsset")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsTakeOn")
                        .HasColumnType("boolean");

                    b.Property<string>("QuoteAsset")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Side")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Stop")
                        .HasColumnType("numeric");

                    b.Property<Guid>("StrategyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TimestampStop")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TimestampTakeOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StrategyId");

                    b.ToTable("Positions", "trading_cl10_bot");
                });

            modelBuilder.Entity("Trading.Domain.Contracts.ReturnIssue", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Current")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("FirstPositionsTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsTrade")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastPositionsTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Maximum")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Returns", "trading_cl10_bot");
                });

            modelBuilder.Entity("Trading.Domain.Contracts.Strategy", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Strategies", "trading_cl10_bot");
                });

            modelBuilder.Entity("Trading.Domain.Contracts.Subposition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("BaseAsset")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientOrderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("LinkSubpositionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("QuoteAsset")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Side")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("SubpositionDirect")
                        .HasColumnType("integer");

                    b.Property<int>("SubpositionType")
                        .HasColumnType("integer");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("Subpositions", "trading_cl10_bot");
                });

            modelBuilder.Entity("Trading.Domain.Contracts.Trade", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("BaseAsset")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientOrderId")
                        .HasColumnType("text");

                    b.Property<int>("Exchange")
                        .HasColumnType("integer");

                    b.Property<decimal>("Fee")
                        .HasColumnType("numeric");

                    b.Property<string>("FeeAsset")
                        .HasColumnType("text");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("QuoteAsset")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SubpositionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Symbol")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TradeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SubpositionId");

                    b.ToTable("Trades", "trading_cl10_bot");
                });

            modelBuilder.Entity("Trading.Domain.Contracts.Equity", b =>
                {
                    b.HasOne("Trading.Domain.Contracts.Strategy", "Strategy")
                        .WithMany("Equities")
                        .HasForeignKey("StrategyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Strategy");
                });

            modelBuilder.Entity("Trading.Domain.Contracts.Order", b =>
                {
                    b.HasOne("Trading.Domain.Contracts.Subposition", "Subposition")
                        .WithMany("Orders")
                        .HasForeignKey("SubpositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subposition");
                });

            modelBuilder.Entity("Trading.Domain.Contracts.Position", b =>
                {
                    b.HasOne("Trading.Domain.Contracts.Strategy", "Strategy")
                        .WithMany("Positions")
                        .HasForeignKey("StrategyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Strategy");
                });

            modelBuilder.Entity("Trading.Domain.Contracts.Subposition", b =>
                {
                    b.HasOne("Trading.Domain.Contracts.Position", "Position")
                        .WithMany("Subpositions")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Trading.Domain.Contracts.Trade", b =>
                {
                    b.HasOne("Trading.Domain.Contracts.Subposition", "Subposition")
                        .WithMany("Trades")
                        .HasForeignKey("SubpositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subposition");
                });

            modelBuilder.Entity("Trading.Domain.Contracts.Position", b =>
                {
                    b.Navigation("Subpositions");
                });

            modelBuilder.Entity("Trading.Domain.Contracts.Strategy", b =>
                {
                    b.Navigation("Equities");

                    b.Navigation("Positions");
                });

            modelBuilder.Entity("Trading.Domain.Contracts.Subposition", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Trades");
                });
#pragma warning restore 612, 618
        }
    }
}
